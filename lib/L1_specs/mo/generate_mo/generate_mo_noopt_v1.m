function [X]=generate_mo_noopt_v1(name)
% autogenerated by xsd_to_mo

if(strcmp(name,'project'))
	X = struct( ...
		'ATTRIBUTE',struct(...
			'id',[]...
			,'name',[]...
			)...
	);
	return
end

if(strcmp(name,'position'))
	X = struct( ...
	);
	return
end

if(strcmp(name,'display_position'))
	X = struct( ...
	);
	return
end

if(strcmp(name,'point'))
	X = struct( ...
		'ATTRIBUTE',struct(...
			'lat',[]...
			,'lng',[]...
			)...
	);
	return
end

if(strcmp(name,'description'))
	X='';
	return
end

if(strcmp(name,'parameters'))
	X = struct( ...
		'ATTRIBUTE',struct(...
			)...
	);
	return
end

if(strcmp(name,'parameter'))
	X = struct( ...
		'ATTRIBUTE',struct(...
			'name',[]...
			,'value',[]...
			)...
	);
	return
end

if(strcmp(name,'table'))
	X = struct( ...
		'column_names',generate_mo_noopt_v1('column_names')...
		,'row',generate_mo_noopt_v1('row')...
		,'ATTRIBUTE',struct(...
			'name',[]...
			)...
	);
	return
end

if(strcmp(name,'column_names'))
	X = struct( ...
	);
	return
end

if(strcmp(name,'column_name'))
	X = struct( ...
		'ATTRIBUTE',struct(...
			'name',[]...
			,'key',[]...
			)...
	);
	return
end

if(strcmp(name,'row'))
	X = struct( ...
	);
	return
end

if(strcmp(name,'column'))
	X='';
	return
end

if(strcmp(name,'link_references'))
	X = struct( ...
	);
	return
end

if(strcmp(name,'link_reference'))
	X = struct( ...
		'ATTRIBUTE',struct(...
			'id',[]...
			)...
	);
	return
end

if(strcmp(name,'network'))
	X = struct( ...
		'ATTRIBUTE',struct(...
			'name',[]...
			,'id',[]...
			)...
	);
	return
end

if(strcmp(name,'NodeList'))
	X = struct( ...
	);
	return
end

if(strcmp(name,'node'))
	X = struct( ...
		'ATTRIBUTE',struct(...
			'id',[]...
			)...
	);
	return
end

if(strcmp(name,'roadway_markers'))
	X = struct( ...
		'marker',generate_mo_noopt_v1('marker')...
	);
	return
end

if(strcmp(name,'marker'))
	X = struct( ...
		'ATTRIBUTE',struct(...
			'id',[]...
			,'name',[]...
			)...
	);
	return
end

if(strcmp(name,'outputs'))
	X = struct( ...
	);
	return
end

if(strcmp(name,'output'))
	X = struct( ...
		'ATTRIBUTE',struct(...
			'link_id',[]...
			)...
	);
	return
end

if(strcmp(name,'inputs'))
	X = struct( ...
	);
	return
end

if(strcmp(name,'input'))
	X = struct( ...
		'ATTRIBUTE',struct(...
			'link_id',[]...
			)...
	);
	return
end

if(strcmp(name,'node_type'))
	X = struct( ...
		'ATTRIBUTE',struct(...
			'id',[]...
			,'name',[]...
			)...
	);
	return
end

if(strcmp(name,'LinkList'))
	X = struct( ...
	);
	return
end

if(strcmp(name,'link'))
	X = struct( ...
		'ATTRIBUTE',struct(...
			'lanes',[]...
			,'length',[]...
			,'id',[]...
			)...
	);
	return
end

if(strcmp(name,'begin'))
	X = struct( ...
		'ATTRIBUTE',struct(...
			'node_id',[]...
			)...
	);
	return
end

if(strcmp(name,'end'))
	X = struct( ...
		'ATTRIBUTE',struct(...
			'node_id',[]...
			)...
	);
	return
end

if(strcmp(name,'roads'))
	X = struct( ...
		'road',generate_mo_noopt_v1('road')...
	);
	return
end

if(strcmp(name,'road'))
	X = struct( ...
		'ATTRIBUTE',struct(...
			'id',[]...
			,'name',[]...
			)...
	);
	return
end

if(strcmp(name,'dynamics'))
	X = struct( ...
		'ATTRIBUTE',struct(...
			'type',[]...
			)...
	);
	return
end

if(strcmp(name,'shape'))
	X='';
	return
end

if(strcmp(name,'link_type'))
	X = struct( ...
		'ATTRIBUTE',struct(...
			'id',[]...
			,'name',[]...
			)...
	);
	return
end

if(strcmp(name,'targetElements'))
	X = struct( ...
	);
	return
end

if(strcmp(name,'settings'))
	X = struct( ...
		'units',generate_mo_noopt_v1('units')...
	);
	return
end

if(strcmp(name,'units'))
	X='';
	return
end

if(strcmp(name,'VehicleTypeSet'))
	X = struct( ...
		'vehicleType',generate_mo_noopt_v1('vehicleType')...
		,'ATTRIBUTE',struct(...
			'id',[]...
			)...
	);
	return
end

if(strcmp(name,'vehicleType'))
	X = struct( ...
		'ATTRIBUTE',struct(...
			'id',[]...
			,'name',[]...
			)...
	);
	return
end

if(strcmp(name,'scenario'))
	X = struct( ...
		'VehicleTypeSet',generate_mo_noopt_v1('VehicleTypeSet')...
		,'ATTRIBUTE',struct(...
			'id',[]...
			,'schemaVersion',[]...
			)...
	);
	return
end

if(strcmp(name,'ScenarioSetType'))
	X = struct( ...
		'ATTRIBUTE',struct(...
			'id',[]...
			,'name',[]...
			)...
	);
	return
end

if(strcmp(name,'NetworkSet'))
	X = struct( ...
		'ATTRIBUTE',struct(...
			'id',[]...
			,'project_id',[]...
			)...
	);
	return
end

if(strcmp(name,'SignalSet'))
	X = struct( ...
		'ATTRIBUTE',struct(...
			'id',[]...
			,'project_id',[]...
			)...
	);
	return
end

if(strcmp(name,'signal'))
	X = struct( ...
		'ATTRIBUTE',struct(...
			'id',[]...
			,'node_id',[]...
			)...
	);
	return
end

if(strcmp(name,'phase'))
	X = struct( ...
		'ATTRIBUTE',struct(...
			'nema',[]...
			,'protected',[]...
			,'permissive',[]...
			,'lag',[]...
			,'recall',[]...
			,'yellow_time',[]...
			,'red_clear_time',[]...
			,'min_green_time',[]...
			)...
	);
	return
end

if(strcmp(name,'SensorSet'))
	X = struct( ...
		'ATTRIBUTE',struct(...
			'id',[]...
			,'project_id',[]...
			)...
	);
	return
end

if(strcmp(name,'sensor'))
	X = struct( ...
		'ATTRIBUTE',struct(...
			'id',[]...
			)...
	);
	return
end

if(strcmp(name,'sensor_type'))
	X = struct( ...
		'ATTRIBUTE',struct(...
			'id',[]...
			,'name',[]...
			)...
	);
	return
end

if(strcmp(name,'ActuatorSet'))
	X = struct( ...
		'ATTRIBUTE',struct(...
			'id',[]...
			,'project_id',[]...
			)...
	);
	return
end

if(strcmp(name,'actuator'))
	X = struct( ...
		'ATTRIBUTE',struct(...
			'id',[]...
			)...
	);
	return
end

if(strcmp(name,'actuator_type'))
	X = struct( ...
		'ATTRIBUTE',struct(...
			'id',[]...
			,'name',[]...
			)...
	);
	return
end

if(strcmp(name,'queue_override'))
	X = struct( ...
		'ATTRIBUTE',struct(...
			'strategy',[]...
			)...
	);
	return
end

if(strcmp(name,'InitialDensitySet'))
	X = struct( ...
		'ATTRIBUTE',struct(...
			'id',[]...
			,'project_id',[]...
			)...
	);
	return
end

if(strcmp(name,'density'))
	X = struct( ...
		'ATTRIBUTE',struct(...
			'vehicle_type_id',[]...
			,'id',[]...
			,'link_id',[]...
			)...
	);
	return
end

if(strcmp(name,'WeavingFactorSet'))
	X = struct( ...
		'ATTRIBUTE',struct(...
			'id',[]...
			,'project_id',[]...
			)...
	);
	return
end

if(strcmp(name,'weavingfactors'))
	X = struct( ...
		'ATTRIBUTE',struct(...
			'vehicle_type_id',[]...
			,'link_in',[]...
			,'link_out',[]...
			)...
	);
	return
end

if(strcmp(name,'SplitRatioSet'))
	X = struct( ...
		'ATTRIBUTE',struct(...
			'id',[]...
			,'project_id',[]...
			)...
	);
	return
end

if(strcmp(name,'splitRatioProfile'))
	X = struct( ...
		'ATTRIBUTE',struct(...
			'id',[]...
			,'node_id',[]...
			)...
	);
	return
end

if(strcmp(name,'splitratio'))
	X = struct( ...
		'ATTRIBUTE',struct(...
			'link_in',[]...
			,'link_out',[]...
			,'vehicle_type_id',[]...
			)...
	);
	return
end

if(strcmp(name,'DownstreamBoundaryCapacitySet'))
	X = struct( ...
		'ATTRIBUTE',struct(...
			'id',[]...
			,'project_id',[]...
			)...
	);
	return
end

if(strcmp(name,'downstreamBoundaryCapacityProfile'))
	X = struct( ...
		'ATTRIBUTE',struct(...
			'id',[]...
			,'link_id',[]...
			)...
	);
	return
end

if(strcmp(name,'EventSet'))
	X = struct( ...
		'ATTRIBUTE',struct(...
			'id',[]...
			,'project_id',[]...
			)...
	);
	return
end

if(strcmp(name,'event'))
	X = struct( ...
		'ATTRIBUTE',struct(...
			'id',[]...
			,'tstamp',[]...
			,'enabled',[]...
			,'type',[]...
			)...
	);
	return
end

if(strcmp(name,'splitratioEvent'))
	X = struct( ...
		'splitratio',generate_mo_noopt_v1('splitratio')...
	);
	return
end

if(strcmp(name,'DemandSet'))
	X = struct( ...
		'ATTRIBUTE',struct(...
			'id',[]...
			,'project_id',[]...
			)...
	);
	return
end

if(strcmp(name,'demandProfile'))
	X = struct( ...
		'ATTRIBUTE',struct(...
			'id',[]...
			,'link_id_org',[]...
			)...
	);
	return
end

if(strcmp(name,'demand'))
	X = struct( ...
		'ATTRIBUTE',struct(...
			'vehicle_type_id',[]...
			)...
	);
	return
end

if(strcmp(name,'ControllerSet'))
	X = struct( ...
		'ATTRIBUTE',struct(...
			'id',[]...
			,'project_id',[]...
			)...
	);
	return
end

if(strcmp(name,'controller'))
	X = struct( ...
		'ATTRIBUTE',struct(...
			'type',[]...
			,'id',[]...
			,'dt',[]...
			)...
	);
	return
end

if(strcmp(name,'controllerType'))
	X = struct( ...
		'ATTRIBUTE',struct(...
			'id',[]...
			,'name',[]...
			)...
	);
	return
end

if(strcmp(name,'usageType'))
	X = struct( ...
		'ATTRIBUTE',struct(...
			'id',[]...
			,'name',[]...
			)...
	);
	return
end

if(strcmp(name,'queue_controller'))
	X = struct( ...
		'ATTRIBUTE',struct(...
			'type',[]...
			)...
	);
	return
end

if(strcmp(name,'ActivationIntervals'))
	X = struct( ...
	);
	return
end

if(strcmp(name,'interval'))
	X = struct( ...
		'ATTRIBUTE',struct(...
			'start_time',[]...
			,'end_time',[]...
			)...
	);
	return
end

if(strcmp(name,'target_actuators'))
	X = struct( ...
	);
	return
end

if(strcmp(name,'target_actuator'))
	X = struct( ...
		'usageType',generate_mo_noopt_v1('usageType')...
		,'ATTRIBUTE',struct(...
			'actuator_id_original',[]...
			)...
	);
	return
end

if(strcmp(name,'feedback_sensors'))
	X = struct( ...
	);
	return
end

if(strcmp(name,'feedback_sensor'))
	X = struct( ...
		'usageType',generate_mo_noopt_v1('usageType')...
		,'ATTRIBUTE',struct(...
			'sensor_id_original',[]...
			)...
	);
	return
end

if(strcmp(name,'scenarioElement'))
	X = struct( ...
		'ATTRIBUTE',struct(...
			'id',[]...
			,'type',[]...
			)...
	);
	return
end

if(strcmp(name,'scenarioElementType'))
	X = struct( ...
		'ATTRIBUTE',struct(...
			'id',[]...
			,'name',[]...
			)...
	);
	return
end

if(strcmp(name,'FundamentalDiagramSet'))
	X = struct( ...
		'ATTRIBUTE',struct(...
			'id',[]...
			,'project_id',[]...
			)...
	);
	return
end

if(strcmp(name,'fundamentalDiagramProfile'))
	X = struct( ...
		'ATTRIBUTE',struct(...
			'id',[]...
			)...
	);
	return
end

if(strcmp(name,'fundamentalDiagram'))
	X = struct( ...
		'ATTRIBUTE',struct(...
			'id',[]...
			,'capacity',[]...
			,'free_flow_speed',[]...
			,'congestion_speed',[]...
			)...
	);
	return
end

if(strcmp(name,'fundamentalDiagramType'))
	X = struct( ...
		'ATTRIBUTE',struct(...
			'id',[]...
			,'name',[]...
			)...
	);
	return
end

if(strcmp(name,'calibrationAlgorithmType'))
	X = struct( ...
		'ATTRIBUTE',struct(...
			'id',[]...
			,'name',[]...
			,'description',[]...
			,'in_use',[]...
			)...
	);
	return
end

if(strcmp(name,'NetworkConnections'))
	X = struct( ...
		'ATTRIBUTE',struct(...
			'project_id',[]...
			)...
	);
	return
end

if(strcmp(name,'networkpair'))
	X = struct( ...
		'ATTRIBUTE',struct(...
			'network_a',[]...
			,'network_b',[]...
			)...
	);
	return
end

if(strcmp(name,'linkpair'))
	X = struct( ...
		'ATTRIBUTE',struct(...
			'link_a',[]...
			,'link_b',[]...
			)...
	);
	return
end

if(strcmp(name,'DestinationNetworks'))
	X = struct( ...
		'ATTRIBUTE',struct(...
			'project_id',[]...
			)...
	);
	return
end

if(strcmp(name,'destination_network'))
	X = struct( ...
		'link_references',generate_mo_noopt_v1('link_references')...
		,'ATTRIBUTE',struct(...
			'id',[]...
			,'link_id_destination',[]...
			)...
	);
	return
end

if(strcmp(name,'RouteSet'))
	X = struct( ...
		'ATTRIBUTE',struct(...
			'project_id',[]...
			,'id',[]...
			)...
	);
	return
end

if(strcmp(name,'route'))
	X = struct( ...
		'ATTRIBUTE',struct(...
			'id',[]...
			)...
	);
	return
end

if(strcmp(name,'route_link'))
	X = struct( ...
		'ATTRIBUTE',struct(...
			'id',[]...
			,'link_id',[]...
			,'link_order',[]...
			)...
	);
	return
end

if(strcmp(name,'duration'))
	X=struct(...
		'ATTRIBUTE',struct(...
			'milliseconds',[]...
			)...
	);
return
end

if(strcmp(name,'dateTime'))
	X=struct(...
		'ATTRIBUTE',struct(...
			'milliseconds',[]...
			)...
	);
return
end

error([name ' is not a supported model object'])